#운영체제 구조
사용자<->쉘, 어플<->API<->시스템콜<->OS<->하드웨어

CPU Protection Rings
	-CPU도 권한 모드라는 것을 가지고 있다.
	-사용자 모드(user mode):
	-커널 모드: 특권명령어 실행과 원하는 작업 수행을 위한 자원 접근을 가능케 하는 모드


#kernel(커널): OS의 핵심
#shell(쉘): 커널을 둘러싼 껍대기

#cpu의 두가지 모드
	-사용자모드: 응용프로그램이 사용
	-커널모드: OS 사용
//명령을 시행할떄 모드를 확인해서 사용자 모드가 특권명령어를 접근하려고 하면 금지, 특권명령어는 커널 모드만 사용가능

#시스템콜은 커널모드로 실행
	-커널모드에서만 실행가능한 기능이 있다
	-커널 모드로 실행하려면, 반드시 시스템 콜을 사용해야함
	-시스템 콜은 운영체제 제공

#**사용자 모드와 커널 모드
	-함부로 응용프로그램이 전체 컴퓨터 시스템을 해치지 못함

//운영체제는 시스템콜 제공
//프로그래밍 언어별로 운영체제 기능을 활용하기 위해, 시스템 콜을 기반으로 API제공
//응용프로그램은 운영체제 기능 필요시, 해당 API를 사용해서 프로그램을 작성
//응용프로그램이 실행돼서, 운영체제 기능이 필요한 API를 호출하면, 시스템 콜이 호출되어, 커널 모드로 변경되어 OS내부에서 해당 명령이 실행되고
	다시 응용프로그램으로 돌아간다.

#프로세스 스케쥴링
- 프로세스 스케쥴링 종류: 배치처리시스템, 시분할 시스템, 멀티태스킹 

#배치처리시스템: 자동으로 다음 응용프로그램이 이어서 실행될 수 있도록 하는 시스템(자료구조 큐랑 비슷)
	#큐: 1, 2, 3, 4 순으로 들어갔다가 1 이 나가고 2가 나가고 3이 나가는 자료구조: FirstInFirstOut
	
#배치처리시스템을 안쓰고 시분할시스템과 멀티 프로그래밍을 쓰는 이유
-배치처리시스템(여러 프로그램을 자동실행)은 늦게 들어온 프로그램의 실행시간이 너무 오래 걸린다.
//어플의 실행시간을 예측해서 짧은것을 일찍 실행하는데 한계가 있음
	-어떤 프로그램은 실행이 너무 시간이 많이 걸려서, 다른 프로그램이 실행하는데 시간을 많이 기다려야한다.
	-음악을 들으면서 문서를 작성하는 것들(멀티태스킹)을 할 수 없다(동시성X)
	-여러 사용자가 동시에 하나의 컴퓨터를 쓰는데, 컴퓨터 응답시간이 너무 길다.(다중사용자지원 불편)
=> 배치처리시스템 대신 멀티프로그래밍, 시분할 시스템이 나왔다.

#시분할 시스템: 다중사용자 지원을 위해 컴퓨터 응답시간을 최소화하는 시스템
	-응용프로그램이 cpu를 점유하는 시간을 잘개 쪼개서 실행될 수 있도록 하는 시스템

#멀티태스킹: 단일 cpu에서 여러 응용프로그램이 동시에 실행되는 거처럼 보이도록 하는 시스템
#멀티프로세싱: 여러 cpu에 하나의 프로그램을 병렬로 실행해서 실행속도를 극대화시키는 시스템

//배치처리시스템의 단점 -> 시분할시스템(다중사용, 응답시간 최소화), 멀티태스킹(동시에)


#멀티 프로그래밍
	-목적: cpu를 최대한 많이 활용(시간대비 cpu활용도 높이기)
	-cpu가 필요하지 않은 실행부분에 다른 프로그램의 끼워 넣음
	-응용프로그램을 짧은 시간 안에 실행 완료 시킬 수 있다
	-응용프로그램은 온전히 cpu를 쓰기보다, 다른 작업을 중간에 필요로 하는 경우가 많다.

//실제로 시분할 시스템, 멀티 프로그래밍, 멀티태스킹이 유사한 의미로 통용된다.(여러 응용프로그램 실행을 가능토록함, 동시에 실행되는거처럼 보임, 짧은 실행시간, 응답속도 증가, 다중 사용자)

	

