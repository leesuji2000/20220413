#부팅booting: 컴퓨터를 켜서 동작시키는 절차
-boot프로그램: 운영체제 커널을 storage에서 특정 주소의 물리 메모리로 복사하고, 커널의 처음 실행위치로 pc를 가져다 놓는 프로그램
	(폰노이만에서, 메모리,cpu,저장매체)
-부팅과정: 컴퓨털르 키면 ROM-BIOS(특별한 램: 컴퓨터가 꺼져도 정보가 있음)가 특정 storage읽어와 메모리에 BIOS코드를 올리고 실행한다
	BIOS프로그램은 컴퓨터를 초기화하고, 저장매체 맨 앞부분 MBR이라고 불리는 곳을 찾아가 부트 로더 모드
	저장매체의 부트 섹터로 가서 부트코드를 읽어서 메모리에 적재, 부트섹터를 이용해서 커널 이미지(실행파일)들을 메모리에 적재시킨다.

#가상머신: 하나의 하드웨어에 다수의 운영체제를 설치하고, 개별 컴퓨터처럼 동작하도록 하는 프로그램-> 컴퓨터가 여러개인거처럼 보임
-가상머신 타입1: 하드 웨어 위에 하이퍼바이저 또는 버추얼 머신 모니터 VMM이라고 하는 소프트웨어가 하드웨어에서 직접 구동 (ex) Xen, KVM
	VMM: 운영체제와 응용프로그램을 물리적 하드웨어에서 분리하는 프로세스
 -가상머신 타입2: 하이퍼바이저 또는 버추얼 모니터 VMM이라는 소프트웨어가 host os상위에 설치

-전가상화(full virwualization): 각 가상머신이 하이퍼바이저를 통해서 하드웨어와 통신
	하이퍼바이저가 마치 하드웨어인 것처럼 동작하므로, 가상머신의 os는 자신이 가상머신인 상태인지를 모름
	-가상머신에 있는 가상머신 자체OS는 VMM을 통해서 서로 변역한다.
-반가상화: 각 가상머신에서 직접 하드웨어와 통신
	-VMM은 cpu 리소스 관리만 하고, 가상머신 os와 하드웨어가 직접 통신한다(더 빠르다)

=>현재는 하드웨어기술이 좋아져서 전가상화 기술을 많이 사용한다., 반가상화는 일일이 하드웨어에 맞게 코드 수정이 필요하기 때문에 번거롭다.

#VVM종류
-VMware: 가장 대중적인 가상머신 프로그램(타입2) => 리눅스를 사용하고 싶은때, 윈도우 운영체제 위해서 VMM을 설치해서 사용하는 경우가 많다.
-KVM: 클라우드컴퓨팅서비스(AWS)등에서 사용(타입1) => cpu에서도 kvm을 도와야하고, 리눅스 커널 중 하나이다.

#또 다른 가상머신: docker
-가상머신은 컴퓨터 하드웨어를 가상화(하드웨어 전체 추상화)
	-하이퍼바이저 사용, 추가 os필요 등 성능 저하 이슈 존재
-docker는 운영체제 레벨에서 별로로 분리된 실행환경을 제공(커널 추상화)
	-마치 리눅스 처음 설치했을때와 유사한 실행환경을 만들어주는 리눅스 컨테이너 기술 기반
	-리눅스 컨테이너 기술이므로 macOS나 window에 설치할 경우는 가상머신 기반 제공
#가상 머신 정리
-bare-metal 방식이 가장 성능이 좋음-> 하드웨어 직접 엑세스하기 때문, aws환경도 bare-metal기반 가상 머신 기술 활용(kvm)
-docker는 경량 이미지로 실행환경을 통째로 백업, 실행가능(실무에서 많이 사용)
	-data engineering 에서 docker로 시스템 환경 설정 + 프로그램을 한번에 배포
	-ex) 프로그램 업데이트 -> docker이미지 작성 -> jenkins로 배치잡 생성 및 실행(aws ecw 재생성 및 docker이미지 설치, 실행)

#자바 벌츄얼 머신: 같은 c언어라도 운영체제에 따라서 다르게 작동한다. -> 코드 하나로 어느 운영체제에서나 같게 실행되도록 하기 위해서 만듬
-가상머신과는 다른 목적으로 응용프로그램을 가상화한다.(cpu dependency를 가지지 않는다.)
