#컴퓨터에서 데이터의 표현
-진법과 진법 변환
-정수 표현
-실수 표현
-디지털 코드
-에러 검출 코드

#진법과 진법 변환
-니블 = 4비트
-바이트 = 8비트
-진법
	-2진법: 0 and 1
	-8진법, 10진법, 16진법 ..
	8진법은 2진법의 3자리수 ex) 111101111-> 757
	16진법읜 2진법의 4자리수 끊어서 계산

	-분수(실수)진법 변환
		-45.75를 2진법으로 바꿀때, 45를 2로 나눈 나머지 값//소수점 75에 2를 곱해서 자연수자리로 올라온 값을 적는다. (딱 떨어지지 않을 경우 정확하게 표현할 수 없다)

	-보수(complement): 최대값을 형성하는데 서로 보완 관계에 있는 두 수 사이의 관계를 one's Complement라고 한다.(99 = a + b와 같이 두개의 수를 더해서 2자리수의 최대값을 나타내는 관계)
		MODULUS(최대표현자리수)를 형성하는데 서로 보완 관계에 있는 두 수 사이의 관계를 two's  complement라고 한다.(100 = a + b와 같이 두개의 수를 더해서 최대 표현 자리수)
		1진 보수: a + b = 1, a + b = 11, a + b = 111
		2진 보수 :a+ b = 10, a+b = 100, a+b = 1000
		2진수의 1의 보수는 자신의 수를 반대(1 <-> 0)로 바꾸면 되고, 2의 보수는 1의 보수에 +1 또는 주어진 수의 우단으로부터 최초의 유효 bit까지 그대로 두고 나머지를 모두 반대(1<-> 0)로 바꾸면 된다.

		정수표현( 고정 소숫점, fixed point number)
			-sign bit -> 0일때 +, 1일때 - => 한계 +0과 -0이 같이 존재
			-2진보수를 이용해서 정수 표현 =>  +0과 -0이 같이 존재 해결
			-unpacked decimal: 10진수형 정수표현(수치연산이 아니라 입출력만 할 비수치연산을 이용할때 사용)
				1바이트 당 10진수 한자만 표현(연산불가능, 입출력가능)
				FD FD FD FSD 형태
			-packed decimal: unpacked decimal 을 연산 가능하도록 (입출력불가능)
				F를 빼고 DDDDS 형태

#실수표현(부동 소수점, floating - point)
	-과학적 표기의 지수(exponent)를 사용하여 소수점의 위치를 이동시킬 수 있는 표현 방법
	부호비트 + 지수(E)비트 + 기수(M)비트

#디지털코드
	-BCD코드, 3초과 코드(보수코드를 이용 -> 통신할때 사용했음)
#에러검출코드
	-패리티비트(해쉬코드에 사용-보안), 해밍비트(8비트 데이터의 에러 정정 코드)

#논리회로와 데이터 표현
	-데이터 표현 실습 - 데이터 종류
	-논리 게이트(logical gate)
	-실무 적용 사례

#데이터 표현 실습
	-사람의 10진수를 컴퓨터 2진수로 변환(진 이진수, 코드화 변화(BCD코드, 입출력을 위해), 정수실수 연산용 변환)
	-소수아래에서는 순환반복(무한소수)가 되어서 정확히 표현할 수 없다.
	-보수개념: 양수, 음수 활용(1진보수는 +0 -0 문제발생 // 2진보수는 음수가 한개 더 많음-> 비트 자리가 없는 것을 사용해서)
		-연산에 활용

#논리 게이트(logical gate)
	-논리 연산을 수행하는 전자소자로서 주어진 입력변수값에 대하여 정해진 논리함수를 수행하여 그 함수의 연산 경과와 동일한 결과값을 출력하는 하드웨어
	-스위칭 이론: 2진 정보를 표현하거나 논리 연산의 실행을 가능하도록 구성된 이론
		직렬 and 병렬 or
#논리연산의 기본표현
	-논리곱and
	-논리합or
	-논리부정not
	-배타적 논리합xor notA*B + notB*A
	=> 게이트를 이용해서 컴퓨터 연산 논리구조를 설계하는 것이다.

#부울대수와 논리식의 간편화
-부울대수(boolean algebra): 참과 거짓을 판별할 수 있는 논리적 명제를 수학적 표현의 논리
	논리회로이 형태와 구졸르 기술하는데 필요한 수학적 이론
	부울 대수를 사용하면 변수들의 진리표 관계를 대수식으로 표현하기 용이
	동일한 성능을 갖는 더 간단한 회로를 만들기에 편리
-부울대수의 기본법칙
	-교환법칙(commutative law)
	-결합법칙(associative law)
	-분배법칙(distribute law)
	-드모르간의 정리(de morgan's theorm)
-부울대수를 이용한 간략화
	-식으로 간편화
	-카노맵: 부울함수를 곧바로 간소화 할 수 있는 규칙
		변수 n개라면 카노맵은 2^n개의 민텀(minterm)으로 구성(표로 표현)
		각 인접 민텀은 하나의 변수만이 변경되어야 한다.
		출력이 1인 기본 곱에 해당하는 민텀은 1로, 나머지는 0으로 표시
		표에 인접한 민텀끼리 묶기

#조합/기억 논리회로
-조합논리회로
-기억회로의 구성 및 작동
-순차회로

-조합회로: 입출력을 가진 논리 게이트의 집합으로 출력은 현재의 입력(0,1)값과 조합의 함수이며, 순차 논리회로(컴퓨터의 완성)는 게이트 뿐만 아니라 기억능력이 있는 플립플로으로 구성
-조합 회로의 설계 절차
	-문제가 제시 된다
	-입출력 변수에 문자 기호를 붙인다
	-입출력사이의 관계를 정의하는 진리표를 유도
	-각 출력에 대한 간소화된 부울 함수를 얻는다
	-논리도를 작성
-대표적인 조합회로
	-가산기(adder): 두개 이상의 입력을 받아 결과물을 출력하는 조합논리회로
		반가산기(half adder): 기본게이트 설명할때 다룬 내용
		전가산기(full adder)
	-멀티플렉서: 다수의 입력 선 중에서 하나만을 선별적(시그널조작)으로 출력 가능하게 해주는 조합 논리 회로
	-디멀티플렉서: 하나의 입력선을 다수개의 출력선으로 분해하는 기능의 조합회로
-플립플로(flip - flop): 저장요소
	-R-S래치
	-D 플립플롭
-순차회로: 플립플롭과 게이트를 연결한것//순차회로의 외부출력은 외부입력과 플립플롭의 현상태의 함수로 표시된다.

#cpu내부 구조와 레지스터
-cpu 구성요소
-각종 레지스터들의 명칭과 기능

#cpu구성요소
-중앙처리장치로 컴퓨터에서 데이터 처리 동작을 수행하는 부분
-cpu는 레지스터 세트, 산술논리장치(ALU), 그리고 제어장치로 구성되어 있다.
-레지스터 세트: 명령어를 실행하는 필요한 데이터 보관
-산술논리장치: 명령어를 실행하기 위한 마이크로 연산을 수행(마이크로 연산: 내부연산, 기기관리<->매크로: 눈에 보이는 밖의 연산)
-제어장치: RS간 정보전송 감시, ALU에게 수행할 동작을 지시

-MAR(memory address register:메모리 상태알려줌) -> 메모리 -> MBR(메모리 버퍼 레지스터: 메모리 주차장-임시저장소) <-> IO기기
PC(프로그램 계수기: 프로그램이 실행될 때, 명령을 차례차례 진행하는것) -> 명령어 레지스터 -> 명령어 해독기 -> 상태레지스터(SR), 작업레지스터(WR저장기록), 범용 레지스터(GR일정기간동안 일반적으로 사용되는내용저장)


#각종 레지스터들의 명칭과 기능
-프로그램 계수기: 다음에 수행될 명령어가 들어있는 주기억장치의 주소를 기억하고 있는 레지스터로 IC(instruction counter: 명령어 계수기) 혹은 LC(location counter: 위치 계수기)라고도 부른다.
-명령 레지스터(instruction register): IR이라고 하며, 프로그램 계수기(PC)가 지정하는 주소에 기억되어 있는 명령어를 해독하기 위해 임시 기억하는 레지스터
-명령어 해독기(instruction decoder): IR에 들어있는 명령코드의해석(각종 명령 코드 -> 제어 신호화하여 기계 사이클로 전송)을 담당하는 논리회로
-제어장치(control unit): ID로 부터 보내져온 신호에 따라 명령어를 실행(clock에 의해 발생)
-범용레지스터(general purpose register): 작업 레지스터에서 data가 용이하게 처리되도록 임시로 자료를 저장하는 경우 사용
-작업 레지스터(working register):  산술 논리연산을 실행할 수 있도록 자료를 저장하고 그 결과를 저장
	(GPR과의 차이점은 ALU에 연결되어있나?의 차이점이다)
-상태 레지스터(status register): cpu 의 상태를 나타내는 특수 목적의 레지스터- 연산결과의 상태, 0(zero), 부호(sign), 오버플로우V(overflow), 캐리 C(carry), 인터럽트

#add 명령어의 실행 예시
1. pc -> MAR //다음에 실행할 명령어의 주소를 MAR로 이동
2. MAR -> MBR //MAR이 지정하는 주소의 내용을 MBR로 이동
3. MBR ->IR //MBR의 내용을 명령어레지스터IR로 이동
4. 어떤 명령어인가? add(예시) 
5. IR(OPRD) -> MAR -> MBR //IR의 주소 부분을 MAR로 이동한 후, add할 내용을 MBR로 이동
6. GR(IR) -> WR //add작업 - data(WR) + data(MBR) //IR에서 지정하는 GR의 내용을 WR로 이동
7. WR + MBR -> WR //add작업 - data(WR) + data(MBR)
8. WR -> GR(IR) //WR의 결과를 GR로 이동
9. PC + 1 -> PC //다음 명령어를 수행하기 위해 PC값 증가

# cpu내부 구조와 명령어 집합
-명령어구성과 실행
-cpu디자인

#명령어(instruction)구성과 실행
-명령어 코드: 레지스터 전송문으로 나타내어지는 기본 컴퓨터의 각 연산이 어떻게 동작하는지 알아본다.
	컴퓨터의 구조는 내부 레지스터, 타이밍과 제어 구조 명령어 집합에 의해 정의
-레지스터 전송 언어: 레지스터에 저장된 데이터의 조작(저장, 이동 등)을 위해 실행되는 동작을 마이크로 연산이라 한다.
	하나의 클럭펄스 내에서 실행되는 기본 동작(shift, count, clear, road..)
-디지털 컴퓨터의 구조를 정의하기 위해
	-레지스터의 종류과 기능
	-레지스터에 저장된 이진 정보를 가지고 수행되는 일련의 마이크로 연산들
	-일련의 마이크로 동작을 온/오프 시킬 수 있는 제어기능

- cpu디자인
	-직접연결: 연결 복잡도가 장치수의 제곱에 비례
	-버스연결: 공용선에 의한 연결
		-가장 가성비 높은 연결 방식
		-관리를 위한 다양한 방법이 제시됨

			