-자연어에 가까운 명령 코드
	-프로그램 개발자 입장에서 코드 감소, 길이 감소, 설계용이
	-cpu구조설계 입장에서 사용 언어에 따른 구조 차이로 오작동, 제어장치의 제어가 매우 복잡해짐
-기계 중심의 명령코드
	-프로그램 규칙이 많고, 길어짐
	-다양한 업체 별 국가별 프로그래밍 표준화 가능, 간편화 가능
=> 현재 기계 중심의 명령코드를 사용하고 있다.

#주소 지정모드(addressing mode): (ref:명령어 구문형식)명령어의 구조상 자료가 저장되어 있는 장소를 지정하는 방법이 필요함
	이유는 하드웨어와 소프트웨어의 독립성을 유지하여 프로그램의 유연성(pointer, indexing)을 가능하게 하여 명령어의 수와 길이를 줄이기 위한 세계적 표준화 기법
#묵시적 모드(operand가 명령어에 포함되어 있지 않은 특수 모드)
	-NOP: no operation, 오퍼랜드가 필요없는 명령어
	-INC: 묵시적 오퍼랜드인 누산기의 연산 명령어
	-ADD: 스택 구조의 명령어(스택에 오퍼랜드가 저장)
#직접 값 모드(operand 자체가 명령어에 포함되어 있는 모드)
	-MOV R1, #100; -> R1 = 100
#레지스터 모드(레지스터에 저장)
	-ADD R1, R2 -> R1 에 R2의 값을 덮어씌운다(오버라이징)
#메모리 직접주소모드
	-MOV R1, 192-> R1 에 192주소값에 있는 값이 들어간다.
#메모리 간접 주소모드
	-MOV R1, @191-> 만일 191번 주소에 200값이 저장되었다고 가정하고 200번 주소에 350값이 저장되었다고 가정하면
				191번 주소에 있는 값(200)에 해당하는 주소(200번째)의 값(350)이 R1에 들어간다

#마이크로 명령 - 입출려과 인터럽트
-입출력 구성
-인터럽트

#입출력 구성: 컴퓨터가 외부 사용자와 통신하기 위해 입출력장치(단말장치 terminal device)
키보드 -> trangmitter interface -> INPR(input register)
					   AC(컴퓨터core부분)
프린터 <- receiver interface < -	   OUTR

=> 입출력 장치와 레지스터는 직렬로 연결되어 있고, 레지스터끼리와 AC부분은 병렬로 연결되어있다

#인터럽트: 사용자가 문자를 입력하는것과 컴퓨터가 문자를 연산하는 속도가 너무 큰 차이가 난다.(컴퓨터가 훨씬 빠르다.) -> 비능률적
	-인터럽트 인 에이블 플립플롭IEN
		-프로그램 제어전송 대신에 외부장치가 전송 준비가 되었을때 컴퓨터에 알리는 방법에 활용되는 플립플롭
		-컴퓨터는 프로그램 실행 도중 플래그를 체크 하지 않으며, 플래그가 세트되면 컴퓨터는 즉각 실행중이던 프로그램을 중지하고 플래그의 세트 정보를 받아들여 입출력 실행/입출력 실행 후 즉시 원프로그램으로 복귀
		-가장 먼저 처리해야하는것을 먼저하고 다시 원래 하고 있던 프로그램으로 복귀

#기본 컴퓨터 프로그래밍
-프로그래밍 일반
-기계어
-어셈블리어

#프로그래밍 일반: 하드웨어를 잘 동작시키고 제어하고, 지시하는 모든 종류의 프로그램을 소프트웨어라고 한다.(시스템 소프트웨어와 응용소프트웨어로 나뉜다)
	-시스템소프트웨어: 
		-운영체제: JOb관리 프로그램, 스케쥴 관리 프로그램, 네트워크 관리 프로그램, 입출력 관리 프로그램
	, 	-언어번역프로그램: 컴파일러, 어셈블리어, 인터프리터 SQL, python
		-유틸리티프로그램: DBMS, VACCINE-바이러스 진단 프로그램, 드라이버 관리 프로그램
	-응용 소프트웨어
		-application, 앱: 사무용 프로그램(office, DRM, DLP), 통방 융합용 프로그램(멀티미디어용, 게임), 의사결정을 지원하는 각종 프로그램
		-모바일용 어플

	